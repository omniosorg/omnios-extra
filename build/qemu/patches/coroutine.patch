
The coroutine ucontext backend uses a combination of sigsetjmp/siglongjmp
and set/getcontext(). It stores the current coroutine data in thread local
storage. When a context is restored into a different thread than the one in
which it last ran, the %fsbase is also restored, leading to a thread that
thinks it is a different one, and critically for this code, a thread that
accesses the TLS of the other.

This patch copies %fsbase from the existing thread context to the new one
before switching so that it resumes with the right identity. If relies on this
being an amd64 binary, and insider knowledge of the libc implementations.

It is not yet understood why this code works on other platforms without this
change, or if there is a better fix. It would be slightly cleaner to use
set/getcontext() throughout, but that adds additional system call overhead.

For more analysis, see https://github.com/omniosorg/illumos-omnios/issues/1260

diff --git a/util/coroutine-ucontext.c b/util/coroutine-ucontext.c
index ddc98fb..9eb4581 100644
--- a/util/coroutine-ucontext.c
+++ b/util/coroutine-ucontext.c
@@ -292,6 +292,10 @@ void qemu_coroutine_delete(Coroutine *co_)
  * return in thread B, and so we might be in a different thread
  * context each time round the loop.
  */
+
+#define SIGJMP2UCONTEXT(x)      \
+            ((ucontext_t *)P2ROUNDUP((uintptr_t)(x),  sizeof (upad128_t)))
+
 CoroutineAction __attribute__((noinline))
 qemu_coroutine_switch(Coroutine *from_, Coroutine *to_,
                       CoroutineAction action)
@@ -305,6 +309,11 @@ qemu_coroutine_switch(Coroutine *from_, Coroutine *to_,
 
     ret = sigsetjmp(from->env, 0);
     if (ret == 0) {
+	ucontext_t *f = SIGJMP2UCONTEXT(from->env);
+	ucontext_t *t = SIGJMP2UCONTEXT(to->env);
+
+        t->uc_mcontext.gregs[REG_FSBASE] = f->uc_mcontext.gregs[REG_FSBASE];
+
         start_switch_fiber_asan(action, &fake_stack_save, to->stack,
                                 to->stack_size);
         start_switch_fiber_tsan(&fake_stack_save,
